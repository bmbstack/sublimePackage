'use strict';

exports.__esModule = true;

var _tokenize2 = require('postcss/lib/tokenize');

var _tokenize3 = _interopRequireDefault(_tokenize2);

var _comment = require('postcss/lib/comment');

var _comment2 = _interopRequireDefault(_comment);

var _parser = require('postcss/lib/parser');

var _parser2 = _interopRequireDefault(_parser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SafeParser = function (_Parser) {
    _inherits(SafeParser, _Parser);

    function SafeParser() {
        _classCallCheck(this, SafeParser);

        return _possibleConstructorReturn(this, _Parser.apply(this, arguments));
    }

    SafeParser.prototype.tokenize = function tokenize() {
        this.tokens = (0, _tokenize3.default)(this.input, { ignoreErrors: true });
    };

    SafeParser.prototype.comment = function comment(token) {
        var node = new _comment2.default();
        this.init(node, token[2], token[3]);
        node.source.end = { line: token[4], column: token[5] };

        var text = token[1].slice(2);
        if (text.slice(-2) === '*/') text = text.slice(0, -2);

        if (/^\s*$/.test(text)) {
            node.text = '';
            node.raws.left = text;
            node.raws.right = '';
        } else {
            var match = text.match(/^(\s*)([^]*[^\s])(\s*)$/);
            node.text = match[2];
            node.raws.left = match[1];
            node.raws.right = match[3];
        }
    };

    SafeParser.prototype.unclosedBracket = function unclosedBracket() {};

    SafeParser.prototype.unknownWord = function unknownWord(start) {
        var buffer = this.tokens.slice(start, this.pos + 1);
        this.spaces += buffer.map(function (i) {
            return i[1];
        }).join('');
    };

    SafeParser.prototype.unexpectedClose = function unexpectedClose() {
        this.current.raws.after += '}';
    };

    SafeParser.prototype.doubleColon = function doubleColon() {};

    SafeParser.prototype.unnamedAtrule = function unnamedAtrule(node) {
        node.name = '';
    };

    SafeParser.prototype.precheckMissedSemicolon = function precheckMissedSemicolon(tokens) {
        var colon = this.colon(tokens);
        if (colon === false) return;

        var split = void 0;
        for (split = colon - 1; split >= 0; split--) {
            if (tokens[split][0] === 'word') break;
        }
        for (split -= 1; split >= 0; split--) {
            if (tokens[split][0] !== 'space') {
                split += 1;
                break;
            }
        }
        var other = tokens.splice(split, tokens.length - split);
        this.decl(other);
    };

    SafeParser.prototype.checkMissedSemicolon = function checkMissedSemicolon() {};

    SafeParser.prototype.endFile = function endFile() {
        if (this.current.nodes && this.current.nodes.length) {
            this.current.raws.semicolon = this.semicolon;
        }
        this.current.raws.after = (this.current.raws.after || '') + this.spaces;

        while (this.current.parent) {
            this.current = this.current.parent;
            this.current.raws.after = '';
        }
    };

    return SafeParser;
}(_parser2.default);

exports.default = SafeParser;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNhZmUtcGFyc2VyLmVzNiJdLCJuYW1lcyI6WyJTYWZlUGFyc2VyIiwidG9rZW5pemUiLCJ0b2tlbnMiLCJpbnB1dCIsImlnbm9yZUVycm9ycyIsImNvbW1lbnQiLCJ0b2tlbiIsIm5vZGUiLCJpbml0Iiwic291cmNlIiwiZW5kIiwibGluZSIsImNvbHVtbiIsInRleHQiLCJzbGljZSIsInRlc3QiLCJyYXdzIiwibGVmdCIsInJpZ2h0IiwibWF0Y2giLCJ1bmNsb3NlZEJyYWNrZXQiLCJ1bmtub3duV29yZCIsInN0YXJ0IiwiYnVmZmVyIiwicG9zIiwic3BhY2VzIiwibWFwIiwiaSIsImpvaW4iLCJ1bmV4cGVjdGVkQ2xvc2UiLCJjdXJyZW50IiwiYWZ0ZXIiLCJkb3VibGVDb2xvbiIsInVubmFtZWRBdHJ1bGUiLCJuYW1lIiwicHJlY2hlY2tNaXNzZWRTZW1pY29sb24iLCJjb2xvbiIsInNwbGl0Iiwib3RoZXIiLCJzcGxpY2UiLCJsZW5ndGgiLCJkZWNsIiwiY2hlY2tNaXNzZWRTZW1pY29sb24iLCJlbmRGaWxlIiwibm9kZXMiLCJzZW1pY29sb24iLCJwYXJlbnQiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7Ozs7Ozs7OztJQUVxQkEsVTs7Ozs7Ozs7O3lCQUVqQkMsUSx1QkFBVztBQUNQLGFBQUtDLE1BQUwsR0FBYyx3QkFBUyxLQUFLQyxLQUFkLEVBQXFCLEVBQUVDLGNBQWMsSUFBaEIsRUFBckIsQ0FBZDtBQUNILEs7O3lCQUVEQyxPLG9CQUFRQyxLLEVBQU87QUFDWCxZQUFJQyxPQUFPLHVCQUFYO0FBQ0EsYUFBS0MsSUFBTCxDQUFVRCxJQUFWLEVBQWdCRCxNQUFNLENBQU4sQ0FBaEIsRUFBMEJBLE1BQU0sQ0FBTixDQUExQjtBQUNBQyxhQUFLRSxNQUFMLENBQVlDLEdBQVosR0FBa0IsRUFBRUMsTUFBTUwsTUFBTSxDQUFOLENBQVIsRUFBa0JNLFFBQVFOLE1BQU0sQ0FBTixDQUExQixFQUFsQjs7QUFFQSxZQUFJ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S0FBS0EsT0FBTCxDQUFhZ0IsTUFBNUI7QUFDQSxpQkFBS2hCLE9BQUwsQ0FBYWQsSUFBYixDQUFrQmUsS0FBbEIsR0FBMEIsRUFBMUI7QUFDSDtBQUNKLEs7Ozs7O2tCQXpFZ0IvQixVIiwiZmlsZSI6InNhZmUtcGFyc2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHRva2VuaXplIGZyb20gJ3Bvc3Rjc3MvbGliL3Rva2VuaXplJztcbmltcG9ydCBDb21tZW50ICBmcm9tICdwb3N0Y3NzL2xpYi9jb21tZW50JztcbmltcG9ydCBQYXJzZXIgICBmcm9tICdwb3N0Y3NzL2xpYi9wYXJzZXInO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTYWZlUGFyc2VyIGV4dGVuZHMgUGFyc2VyIHtcblxuICAgIHRva2VuaXplKCkge1xuICAgICAgICB0aGlzLnRva2VucyA9IHRva2VuaXplKHRoaXMuaW5wdXQsIHsgaWdub3JlRXJyb3JzOiB0cnVlIH0pO1xuICAgIH1cblxuICAgIGNvbW1lbnQodG9rZW4pIHtcbiAgICAgICAgbGV0IG5vZGUgPSBuZXcgQ29tbWVudCgpO1xuICAgICAgICB0aGlzLmluaXQobm9kZSwgdG9rZW5bMl0sIHRva2VuWzNdKTtcbiAgICAgICAgbm9kZS5zb3VyY2UuZW5kID0geyBsaW5lOiB0b2tlbls0XSwgY29sdW1uOiB0b2tlbls1XSB9O1xuXG4gICAgICAgIGxldCB0ZXh0ID0gdG9rZW5bMV0uc2xpY2UoMik7XG4gICAgICAgIGlmICggdGV4dC5zbGljZSgtMikgPT09ICcqLycgKSB0ZXh0ID0gdGV4dC5zbGljZSgwLCAtMik7XG5cbiAgICAgICAgaWYgKCAvXlxccyokLy50ZXN0KHRleHQpICkge1xuICAgICAgICAgICAgbm9kZS50ZXh0ICAgICAgID0gJyc7XG4gICAgICAgICAgICBub2RlLnJhd3MubGVmdCAgPSB0ZXh0O1xuICAgICAgICAgICAgbm9kZS5yYXdzLnJpZ2h0ID0gJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgbWF0Y2ggPSB0ZXh0Lm1hdGNoKC9eKFxccyopKFteXSpbXlxcc10pKFxccyopJC8pO1xuICAgICAgICAgICAgbm9kZS50ZXh0ICAgICAgID0gbWF0Y2hbMl07XG4gICAgICAgICAgICBub2RlLnJhd3MubGVmdCAgPSBtYXRjaFsxXTtcbiAgICAgICAgICAgIG5vZGUucmF3cy5yaWdodCA9IG1hdGNoWzNdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdW5jbG9zZWRCcmFja2V0KCkgeyB9XG5cbiAgICB1bmtub3duV29yZChzdGFydCkge1xuICAgICAgICBsZXQgYnVmZmVyICAgPSB0aGlzLnRva2Vucy5zbGljZShzdGFydCwgdGhpcy5wb3MgKyAxKTtcbiAgICAgICAgdGhpcy5zcGFjZXMgKz0gYnVmZmVyLm1hcCggaSA9PiBpWzFdICkuam9pbignJyk7XG4gICAgfVxuXG4gICAgdW5leHBlY3RlZENsb3NlKCkge1xuICAgICAgICB0aGlzLmN1cnJlbnQucmF3cy5hZnRlciArPSAnfSc7XG4gICAgfVxuXG4gICAgZG91YmxlQ29sb24oKSB7IH1cblxuICAgIHVubmFtZWRBdHJ1bGUobm9kZSkge1xuICAgICAgICBub2RlLm5hbWUgPSAnJztcbiAgICB9XG5cbiAgICBwcmVjaGVja01pc3NlZFNlbWljb2xvbih0b2tlbnMpIHtcbiAgICAgICAgbGV0IGNvbG9uID0gdGhpcy5jb2xvbih0b2tlbnMpO1xuICAgICAgICBpZiAoIGNvbG9uID09PSBmYWxzZSApIHJldHVybjtcblxuICAgICAgICBsZXQgc3BsaXQ7XG4gICAgICAgIGZvciAoIHNwbGl0ID0gY29sb24gLSAxOyBzcGxpdCA+PSAwOyBzcGxpdC0tICkge1xuICAgICAgICAgICAgaWYgKCB0b2tlbnNbc3BsaXRdWzBdID09PSAnd29yZCcgKSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBmb3IgKCBzcGxpdCAtPSAxOyBzcGxpdCA+PSAwOyBzcGxpdC0tICkge1xuICAgICAgICAgICAgaWYgKCB0b2tlbnNbc3BsaXRdWzBdICE9PSAnc3BhY2UnICkge1xuICAgICAgICAgICAgICAgIHNwbGl0ICs9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG90aGVyID0gdG9rZW5zLnNwbGljZShzcGxpdCwgdG9rZW5zLmxlbmd0aCAtIHNwbGl0KTtcbiAgICAgICAgdGhpcy5kZWNsKG90aGVyKTtcbiAgICB9XG5cbiAgICBjaGVja01pc3NlZFNlbWljb2xvbigpIHsgfVxuXG4gICAgZW5kRmlsZSgpIHtcbiAgICAgICAgaWYgKCB0aGlzLmN1cnJlbnQubm9kZXMgJiYgdGhpcy5jdXJyZW50Lm5vZGVzLmxlbmd0aCApIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudC5yYXdzLnNlbWljb2xvbiA9IHRoaXMuc2VtaWNvbG9uO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3VycmVudC5yYXdzLmFmdGVyID0gKHRoaXMuY3VycmVudC5yYXdzLmFmdGVyIHx8ICcnKSArIHRoaXMuc3BhY2VzO1xuXG4gICAgICAgIHdoaWxlICggdGhpcy5jdXJyZW50LnBhcmVudCApIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMuY3VycmVudC5wYXJlbnQ7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQucmF3cy5hZnRlciA9ICcnO1xuICAgICAgICB9XG4gICAgfVxuXG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
